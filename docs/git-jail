Выдача доступа к отдельной директории в GIT.

Порою требуется дать доступ к какой-то части репозитория Дизайнеру или
Верстальщику. Это можно сделать используя FTP. Но когда для версионирования
используется GIT, и над файлами могут работать несколько человек,
возникают проблемы, при которых один разработчик, затирает изменения другого.
При этом, приходится постоянно вручную коммитить все изменения и отправлять
коммиты самостоятельно. Что бы как-то автоматизировать данную задачу,
был написан простой модуль git-jail.

Типичный пример:
Программист пишет код и имеет полный доступ к репозитарию проекта. Верстальщик
работает исключительно с шаблонами, и не является постоянным работником(аутсорс).
В результате, код написанный Программистом, не должен быть доступен
Верстальщику, Тестеру и тд. С точки зрения безопасности и политики компании,
достаточно верный подход. С учетом того, что Верстальщик работает с тестовой
платформой и может проверить свои изменения после коммита.

Рассмотрим пример того, как можно организовать с помощью git-jail,
данную задачу:

Создание php проекта:
# ahc -m apache -t php -a example.com

Создание директории и файлов, для Верстальщика:
# mkdir /srv/projects/example.com/www/templates && echo `date` > /srv/projects/example.com/www/templates/date.html

Создание основного репозитория проекта, для Программиста:
# ahc -m git -a example.com

Добавление пользователя и его публичного ключа в систему:
# ahc -m git_jail -a mail@example.com -p 'TYPE KEY-STRING COMMENT'

Создание виртуального(изолированного) репозитория и выдача прав:
# ahc -m git_jail -i example.com -e templates -u mail@example.com

В данном примере, Верстальщик получает доступ к папке templates проекта
example.com. Для него, это корневой репозиторий. Код основного проекта
example.com ему недоступен.
При любых изменениях Программиста, коммиты синхронизируется с репозиторием
Верстальщика и наоборот.
Данный модуль подходит для тех, кто использует песочницу и Git деплоймент.
При частых коммитах, на продакшен серверах, лучше использовать fabric в
совокупности с touch reload.

Для клонирования репозитория, Верстальщику достаточно выполнить команду:
$ git clone git@server:example.com/templates.git

В то время, как для программиста команда несколько иная:
$ git clone ssh://root@example.com/home/git/repositories/example.com.git

Все коммиты Верстальщика, будут синхронизированы с основным репозиторием,
к которому имеет доступ только Программист.

В случае увольнения или окончания работы Верстальщика, над проектами,
его следует удалить из системы. Сделать это можно командой:
# ahc -m git_jail -d mail@example.com

Если Верстальщик имеет доступ к нескольким проектам, и нужно запретить
доступ только к одному из проектов, то лучше выполнить команду:
# ahc -m git_jail -i example.com -f templates -u mail@example.com

Для просмотра пользователей и их прав, используйте команду:
# ahc -m git_jail -l

Примечание:
1. Если для обзора Вы или Ваш руководитель использует(е) в качестве основного
репозитория GitHub или GitLab, Вы можете добавить дополнительный
репозиторий(repo), и все изменения будут автоматически отправляться и туда.
Пример:
# git remote add repo https://github.com/user/repository.git

2. Рабочая ветка переключается автоматически на ту, которую использует коммитер.
Будь то коммит от Программиста или Верстальщика. То есть работа с ветками
доступна из коробки.
