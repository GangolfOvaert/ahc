Установка и первоначальная настройка

Для того что бы установить пакет, нужно удовлетворить все зависимости.
Повышаем привилегии до рута, обновляем информацию и устанавливаем
необходимые  пакеты:
$ sudo -i
# apt-get update && apt-get upgrade -y
# apt-get install -y python-pip python-mysqldb python-pycurl python-flup git-core make

Получаем исходные тексты программы, для последующей установки:
# cd /usr/src/ && git clone https://github.com/gotlium/ahc.git
# cd ahc/ && pip install -r requirements.txt

Теперь нам нужно выбрать тип установки. Можно установить сразу,
используя make, или же собрать deb пакет.

Для установки без сборки, используем команду:
# make install

Для сборки и установки deb пакета:
# fakeroot
# ./makedeb
# dpkg -i ahc.deb

На этом базовая установка закончена. Остается лишь получить все
сопутствующие пакеты, для разработки и настроить сетевой экран.

Перед установкой необходимых пакетов, вам стоит ознакомиться с файлом
/usr/lib/ahc/templates/lamp.sh . Удалите в нем пакеты,
которые Вы использовать не будете. К примеру если вы пишите на python,
то вам не понадобятся пакеты с ruby и php. Потому эта часть остается сугубо
на ваших плечах.
После чистки, необходимо установить все пакеты, которые были выбраны.
Выполним команду:
# ahc -m install -s lamp
LAMP - это условный сервис, который подразумевает совокупность сервисов.
Фактически в данном случае это может не соответствовать выбранной
аббревиатуре. Так как вы могли оставить Python+Nginx,
а в качестве БД используете SQLite.

Установим сетевой экран командой:
# ahc -m install -s firewall

Если Ваш SSH демон использует порт отличный от 22, то стоит прописать его в
файле: /usr/lib/ahc/templates/fw.conf . В противном случае вы можете
лишиться доступа к удаленному серверу. По умолчанию в настройках фаервола
уже прописаны правила для DNS,HTTP,HTTPS,SSH,SMTP,POP3 сервисов. Если вы не
используете что-то из этого, то лучше удалить ненужные правила.

После установки программы, пакетов lamp и фаервола,
программа готова к использованию. Вам нужно решить какие средства вы хотите
использовать. Если вы хотите использовать SSL, то изначально нужно
cгенерировать сертификаты, для вашего веб-сервера.
Для Apache:
# ahc -m install -s apache2_ssl
Для Nginx:
# ahc -m install -s nginx_ssl
Если Вам не нужен SSL, то его нужно отключить в файле конфигурации. Так как
по умолчанию он включен. Сделать можно это отредактировав файл: /etc/ahc.conf
Установите директиву: use_ssl = 0 .

Файл конфигурации достаточно простой. Желательно изначально его нужно
сконфигурировать. Давайте посмотрим на самые важные значения,
перед тем как приступить к примеру работы с виртуальным хостами.
Откроем: /etc/ahc.conf

projects_directory - директория, где хранятся проекты
useruid - id пользователя, под учетной записью которого вы работаете.
website_folder - папка, в которой хранится проект. Может быть www или
    httpdocs. Тут как Вам удобнее и как вы привыкли.
Все что начинается с "bin" - это исполняемые файлы. Они должны
соответствовать действительности.
Нужно сразу указывать необходимый порт используемого веб-сервера. По
умолчанию apache использует пор 80, а nginx 81.
Если вы используете только nginx, вы скорее всего не устанавливали apache. И
 потому сразу меняете порт с 81 на 80 и 444 на 443.
При использовании MySQL, стоит указать правильные данные для авторизации.
Или же удалить дефолтный пароль, что бы программа запрашивала пароль
постоянно.

Директив конфигурации очень много. И их описание выходит за предел мана по
установке. Теперь вы можете одной командой добавить хост на любимом
веб-сервере и интерпретаторе.
К примеру:
# ahc -m apache -t php -a example.com
# ahc -m apache -t python -a example.com
# ahc -m apache -t django -a example.com
# ahc -m apache -t ruby -a example.com
# ahc -m apache -t ror -a example.com

В случае с Python и Django можно использовать ключ -w,
если вам требуется модуль mod_wsgi.
-b позволит вам добавить авторизацию в сэндбоксе.
-o оптимизировать заголовки, для статики.
